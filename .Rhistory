compare[["classifiers"]][[1]][["result"]]$plotDensity()
compare[["classifiers"]][[2]][["result"]]$plotDensity()
compare[["classifiers"]][[3]][["result"]]$plotDensity()
compare[["classifiers"]][[4]][["result"]]$plotDensity()
genSim = function(mode1, iqr1, mode2, iqr2, prevalence) {
cd2 = ConditionalDistribution$new()
cd2$withDistribution(KumaraswamyDistribution$new(mode=mode1,iqr=iqr1),"negative",1-prevalence)
cd2$withDistribution(MirroredKumaraswamyDistribution$new(mode=mode2,iqr=iqr2),"positive",prevalence)
crSim = ClassifierResult$fromConditionalDistribution(cd2)$setPositive("positive")
return(crSim)
}
tmp = genSim(mode1=0.1,iqr1=0.1,mode2=0.8,iqr2=0.3,prevalence=0.1)
compare = ClassifierComparison$new()
paramSets = list(
list(mode1=0.1,iqr1=0.1,mode2=0.8,iqr2=0.3,prevalence=0.1),
list(mode1=0.2,iqr1=0.2,mode2=0.6,iqr2=0.2,prevalence=0.1),
list(mode1=0.4,iqr1=0.1,mode2=0.6,iqr2=0.3,prevalence=0.1),
list(mode1=0.3,iqr1=0.05,mode2=0.9,iqr2=0.1,prevalence=0.1)
)
invisible(sapply(paramSets, function(l) {compare$withResult(parameterList = l, do.call(genSim,l))}))
compare$compareDistributionStats()
genSim = function(mode1, iqr1, mode2, iqr2, prevalence) {
cd2 = ConditionalDistribution$new()
cd2$withDistribution(KumaraswamyDistribution$new(mode=mode1,iqr=iqr1),"negative",1-prevalence)
cd2$withDistribution(MirroredKumaraswamyDistribution$new(mode=mode2,iqr=iqr2),"positive",prevalence)
crSim = ClassifierResult$fromConditionalDistribution(cd2)$setPositive("positive")
return(crSim)
}
tmp = genSim(mode1=0.1,iqr1=0.1,mode2=0.8,iqr2=0.3,prevalence=0.1)
compare = ClassifierComparison$new()
paramSets = list(
list(mode1=0.1,iqr1=0.1,mode2=0.8,iqr2=0.3,prevalence=0.1),
list(mode1=0.2,iqr1=0.2,mode2=0.6,iqr2=0.2,prevalence=0.1),
list(mode1=0.4,iqr1=0.1,mode2=0.6,iqr2=0.3,prevalence=0.1),
list(mode1=0.3,iqr1=0.05,mode2=0.9,iqr2=0.1,prevalence=0.1)
)
invisible(sapply(paramSets, function(l) {compare$withResult(parameterList = l, do.call(genSim,l))}))
compare$plotRocs()
?tidyinfostats::probabilitiesFromConfusionMatrix
?dnorm
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
devtools::load_all("..")
n = NormalDistribution$new(mean=0,sd=1)
n$plot(-5,5)
ggplot(n$sample(100000),aes(x=x))+geom_histogram(bins = 500)
n2 = UniformDistribution$new(min=2,max=4)
n2$plot(xmin=0,xmax=5)
devtools::load_all("..")
n3 = LogNormalDistribution$new(mode=6,sd=2)
n3$plot(0,20)
n3$q(seq(0,1,length.out = 5))
devtools::load_all("..")
n3 = LogNormalDistribution$new(mean=6,sd=2)
n3$plot(0,20)
n4 = KumaraswamyDistribution$new(mode=0.4,iqr=0.3)
n4$plot(0,1)
n5 = MirroredKumaraswamyDistribution$new(mode=0.6,iqr=0.3)
n5$plot(0,1)
paste0("Entropy: ",n3$theoreticalEntropy())
cd = ConditionalDistribution$new()
cd$withDistribution(n)
cd$withDistribution(n2,"class 2",1)
cd$plot(xmin=-5,xmax=5)
ggplot(cd$sample(10000),aes(x=x,fill=y))+geom_histogram(position="dodge",bins=40)
paste0("Mean: ",cd$theoreticalMean())
paste0("Variance: ",cd$theoreticalVariance())
paste0("Mutual information between x and y: ",cd$theoreticalMI())
cd2 = ConditionalDistribution$new()
cd2$withDistribution(n4,"class 1",1)
cd2$withDistribution(n5,"class 2",2)
cd2$plot(xmin=0,xmax=1)
cd3 = ConditionalDistribution$new()
cd3$withRandomDistributions(3)
cd3$plot(-5,5)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
devtools::load_all("~/Git/classifier-result/")
cd2 = ConditionalDistribution$new()
cd2$withDistribution(n4,"class 1",1)
cd2$withDistribution(n5,"class 2",2)
cd2$plot(xmin=0,xmax=1)
n5$bigP(0.5)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(ensurer)
library(SparseM)
#devtools::install_github("terminological/standard-print-output")
#library(standardPrintOutput)
devtools::load_all("~/Git/standard-print-output/")
theme_set(standardPrintOutput::defaultFigureLayout())
# devtools::install_github("terminological/tidy-info-stats")
devtools::load_all("~/Git/tidy-info-stats/")
devtools::load_all("~/Git/classifier-result/")
# library(tidyinfostats)
# rm(list = ls(all.names = TRUE))
devtools::load_all("~/Git/etl-analysis/r-packages/omop-utils/")
source("./antibioticResistanceSetup.R")
omop$useCached()
# Get the sensitivity results in the omop database
dbSensitivityResults = omop$persist("abxSensitivityResults",
omop$measurement %>%
semi_join(resistanceOutcome$result, by=c("value_as_concept_id"="concept_id")) %>%
filter(measurement_source_value %like% "%UCUL") %>% omop$getConceptNames() %>%
mutate(
antibiotic = ifelse(measurement_concept_name=="No matching concept","Flucloxacillin", replace(measurement_concept_name, " [Susceptibility]",""))
) %>% filter(
antibiotic %in% c("Trimethoprim","Nitrofurantoin")
) %>%
group_by(person_id,measurement_datetime,antibiotic) %>% mutate(uniq = n()) %>% filter(uniq == 1) %>% select(-uniq) %>%
ungroup()
)
# generate a summary table
dbSensitivityResults %>% group_by(antibiotic, value_as_concept_name) %>% summarise(
count = n(),
patients = n_distinct(person_id)
) %>% ungroup() %>% collect() %>% arrange(antibiotic,value_as_concept_name)  %>% group_by(antibiotic) %>% saveTable("~/Dropbox/antibioticResistance/utiSampleCounts")
# colnames(dbSensitivityResults)
# grab just the outcome data we are interested in - 2 outcome classes with 2 possible outcomes
outcomeCohort =  omop$persist("abxOutcomeCohort",
dbSensitivityResults %>% select(
person_id,
antibiotic,
outcome_type=measurement_concept_id,
sensitivity=value_as_concept_name,
outcome_value=value_as_concept_id,
event_datetime=measurement_datetime
)  %>% createSequentialIdentifier(vars(person_id,event_datetime), sample_id),
indexes=list("person_id","event_datetime","sample_id")
)
# TODO: consider getting the first (?last) event for each patient
# colnames(omop$note)
# colnames(omop$note_nlp)
# get predictors...
predictorVariables = omop$persist("abxPredictorVariables",
outcomeCohort %>%
select(person_id, event_datetime, sample_id) %>%
inner_join(omop$note, by="person_id") %>%
filter(note_datetime < event_datetime) %>%
inner_join(omop$note_nlp, by="note_id"),
indexes=list("sample_id")
)
# This summarises the content of the predictor variables, but needs work on summariseTopN to allow layers of nesting
# predictorSummary = predictorVariables %>% group_by(note_nlp_concept_id) %>% summarise(count = n()) %>% omop$getConceptNames() %>% collect()
# predictorSummary %>% group_by(note_nlp_concept_name) %>% summariseTopN(n=20, sortVar=desc(count), count = sum(count))
predictorTfidf = omop$persist("abxPredictorTfidf",
predictorVariables %>% group_by(sample_id) %>%
tidyinfostats::calculateTfidf(vars(note_nlp_concept_id)),
indexes=list("sample_id")
)
# predictorVariables %>% count()
predictorVariablesExpanded = omop$persist("abxPredictorVariablesExpanded",
predictorVariables %>%
group_by(sample_id) %>%
omop$expandAncestorConcepts(note_nlp_concept_id),
indexes=list("sample_id")
)
predictorTfidfExpanded = omop$persist("abxPredictorTfidfExpanded",
predictorVariablesExpanded %>%
group_by(sample_id) %>%
tidyinfostats::calculateTfidf(vars(note_nlp_concept_id)),
indexes=list("sample_id")
)
# TODO: expand hierarchy
# TODO: include other sources of info (e.g. blood tests, procedures, diagnoses)
antibioticSet = omop$persist("abxAntibioticSet",
outcomeCohort %>% inner_join(predictorTfidf, by="sample_id") %>% arrange(sample_id) %>% ungroup()
)
antibioticSetExpanded = omop$persist("abxAntibioticSetExpanded",
outcomeCohort %>% inner_join(predictorTfidfExpanded, by="sample_id") %>% arrange(sample_id) %>% ungroup()
)
# TODO: https://bookdown.org/yihui/rmarkdown/language-engines.html#sql
# antibioticMI = antibioticSet %>% group_by(antibiotic,note_nlp_concept_id) %>% calculateDiscreteContinuousMI(vars(sensitivity), norm_okapi_bm25)
# tmp = antibioticSet %>% expectOnePerSample(vars(sensitivity), vars(person_id)) %>% collect()
# antibioticMIAbs = antibioticSet %>% group_by(antibiotic,note_nlp_concept_id) %>% calculateDiscreteAbsentValuesMI(vars(sensitivity), vars(person_id))
# tmp = antibioticSet %>% group_by(antibiotic,note_nlp_concept_id) %>% calculateDiscreteAbsentValuesMI(
#   discreteVars = vars(sensitivity),
#   sampleVars = vars(sample_id)) %>%
# 	  rename(I_given_abs = I) %>% mutate(tmp_join=1) %>% compute() %>% omop$getConceptNames() %>% collect()
#
# antibioticMI = antibioticSet %>% group_by(antibiotic,note_nlp_concept_id) %>% calculateDiscreteContinuousMI(
#   discreteVars = vars(sensitivity),
#   continuousVar = norm_okapi_bm25)
antibioticMI = omop$persist("abxAntibioticMI",
antibioticSet %>% group_by(antibiotic,note_nlp_concept_id) %>% adjustMIForAbsentValues(
discreteVars = vars(sensitivity),
sampleVars = vars(sample_id),
mutualInformationFn = calculateDiscreteContinuousMI,
continuousVar = norm_okapi_bm25)
)
antibioticMIResult = omop$persist("abxAntibioticMIResult",
antibioticMI %>% omop$getConceptNames()
)
antibioticMIResult %>% collect() %>% group_by(antibiotic,note_nlp_concept_name) %>% summariseTopN(n=10, sortVar=desc(I), I = max(I), Observed=sum(N_pres), Missing=sum(N_abs)) %>% ungroup() %>%  saveTable("~/Dropbox/antibioticResistance/mostInformation")
# antibioticMIExpanded = antibioticSetExpanded %>% group_by(antibiotic,note_nlp_concept_id) %>% calculateDiscreteContinuousMI(
#   discreteVars = vars(sensitivity),
#   continuousVar = norm_okapi_bm25)
antibioticMIExpanded = omop$persist("abxAntibioticMIExpanded",
antibioticSetExpanded %>% group_by(antibiotic,note_nlp_concept_id) %>% adjustMIForAbsentValues(
discreteVars = vars(sensitivity),
sampleVars = vars(sample_id),
mutualInformationFn = calculateDiscreteContinuousMI,
continuousVar = norm_okapi_bm25)
)
antibioticMIResultExpanded = omop$persist("abxAntibioticMIResultExpanded",
antibioticMIExpanded %>% omop$getConceptNames()
)
antibioticMIResultExpanded %>% collect() %>% group_by(antibiotic,note_nlp_concept_name) %>% summariseTopN(n=10, sortVar=desc(I), I = max(I), Observed=sum(N_pres), Missing=sum(N_abs)) %>% ungroup() %>%
saveTable("~/Dropbox/antibioticResistance/mostInformationExpanded")
# TODO: this would be better as a groupwise summariseTopN
# DONE: adjust MI for absent values needs testing
# DONE: debug MI for Absent values
# TODO: investigate effect of expanded hierarchy
# TODO: cooccuring codes
sacralUlcers = Searcher$fromSearch(omop, "Pressure ulcer of sacral region")
sacralUlcers$expandAncestorConcepts(max=100)
# find a subset of our expanded MI result to visualise:
miSacralUlcers = antibioticMIExpanded %>% semi_join(sacralUlcers$toDataframe(), by=c("note_nlp_concept_id"="concept_id"))
miSacralUlcers = miSacralUlcers %>% filter(antibiotic=="Trimethoprim") %>% compute()
devtools::load_all("~/Git/etl-analysis/r-packages/omop-utils/")
analyser = Analyser$new(omop, miSacralUlcers, note_nlp_concept_id)
analyser$longestPaths()
analyser$mutateNodes(
p_x = as.double(N_pres)/N_exp,
probWeightedI = I*p_x,
entWeightedI = -I*p_x*log(p_x)
)
cuts = seq(analyser$nodes %>% pull(I) %>% min(),analyser$nodes %>% pull(I) %>% max(),length.out=10)
analyser$toDiagrammeR() %>%
DiagrammeR::colorize_node_attrs(
node_attr_from = I,
node_attr_to = fillcolor,
palette = "Greens",
cut_points = cuts, alpha=80) %>%
standardPrintOutput::saveFullPageGraphLandscape("~/Dropbox/antibioticResistance/miHierarchyExpansion")
cuts2 = seq(analyser$nodes %>% pull(probWeightedI) %>% min(),analyser$nodes %>% pull(probWeightedI) %>% max(),length.out=10)
analyser$toDiagrammeR() %>%
DiagrammeR::colorize_node_attrs(
node_attr_from = probWeightedI,
node_attr_to = fillcolor,
palette = "Oranges",
cut_points = cuts2, alpha=80) %>%
standardPrintOutput::saveFullPageGraphLandscape("~/Dropbox/antibioticResistance/miHierarchyExpansionProbWeighted")
cuts3 = seq(analyser$nodes %>% pull(entWeightedI) %>% min(),analyser$nodes %>% pull(entWeightedI) %>% max(),length.out=10)
analyser$toDiagrammeR() %>%
DiagrammeR::colorize_node_attrs(
node_attr_from = entWeightedI,
node_attr_to = fillcolor,
palette = "Blues",
cut_points = cuts3, alpha=80) %>%
standardPrintOutput::saveFullPageGraphLandscape("~/Dropbox/antibioticResistance/miHierarchyExpansionEntWeighted")
# with single level hierarchy we get
analyser$nodesWithMaxScores(entWeightedI) %>% arrange(desc(entWeightedI))
analyser$nodesWithMaxScores(probWeightedI) %>% arrange(desc(probWeightedI))
analyser$nodesWithMaxScores(I) %>% arrange(desc(I))
# maximum within all neighbours
devtools::load_all("~/Git/etl-analysis/r-packages/omop-utils/")
analyser2 = Analyser$new(omop, miSacralUlcers, note_nlp_concept_id)
analyser2$mutateNodes(
p_x = as.double(N_pres)/N_exp,
probWeightedI = I*p_x,
entWeightedI = -I*p_x*log(p_x)
)
analyser2$nodesWithMaxScores(entWeightedI)
analyser2$nodesWithMaxScores(probWeightedI)
analyser2$nodesWithMaxScores(I)
# maximum within all grandparents / granchildren
# devtools::load_all("~/Git/etl-analysis/r-packages/omop-utils/")
analyser2b = analyser2$clone()$longestPaths(2)
analyser2b$nodesWithMaxScores(entWeightedI)
analyser2b$nodesWithMaxScores(probWeightedI)
analyser2b$nodesWithMaxScores(I)
devtools::load_all("~/Git/etl-analysis/r-packages/omop-utils/")
rawFeats =  antibioticMI %>% filter(antibiotic=="Trimethoprim") %>% rename(concept_id = note_nlp_concept_id)
expandedFeats =  antibioticMIExpanded %>% filter(antibiotic=="Trimethoprim") %>% rename(concept_id = note_nlp_concept_id)
analyser3 = Analyser$new(omop,  expandedFeats, concept_id)
analyser3$mutateNodes(
p_x = as.double(N_pres)/N_exp,
probWeightedI = I*p_x,
entWeightedI = -I*p_x*log(p_x)
)
entWtFeats = analyser3$nodesWithMaxScores(entWeightedI)
probWtFeats = analyser3$nodesWithMaxScores(probWeightedI)
pureMIFeats = analyser3$nodesWithMaxScores(I)
# also do this with more local maxima - maximum of 1 hop up or down...
analyser4 = analyser3$clone()$longestPaths()
entWtFeats2 = analyser4$nodesWithMaxScores(entWeightedI)
probWtFeats2 = analyser4$nodesWithMaxScores(probWeightedI)
pureMIFeats2 = analyser4$nodesWithMaxScores(I)
# also do this with intermediate (i.e. up to 2 hops in each direction) maxima...
analyser5 = analyser3$clone()$longestPaths(2)
entWtFeats3 = analyser5$nodesWithMaxScores(entWeightedI)
probWtFeats3 = analyser5$nodesWithMaxScores(probWeightedI)
pureMIFeats3 = analyser5$nodesWithMaxScores(I)
featureSets = list(
list(
expansion="no expansion",
filtering="no filtering",
maxima="na",
features=rawFeats
),
list(
expansion="expansion",
filtering="no filtering",
maxima="na",
features=expandedFeats
),
list(
expansion="expansion",
filtering="entropy weighted MI",
maxima="unlimited hierarchy",
features=entWtFeats
),
list(
expansion="expansion",
filtering="entropy weighted MI",
maxima="1 level hierarchy",
features=entWtFeats2
),
list(
expansion="expansion",
filtering="entropy weighted MI",
maxima="2 level hierarchy",
features=entWtFeats3
),
list(
expansion="expansion",
filtering="probability weighted MI",
maxima="unlimited hierarchy",
features=probWtFeats
),
list(
expansion="expansion",
filtering="probability weighted MI",
maxima="1 level hierarchy",
features=probWtFeats2
),
list(
expansion="expansion",
filtering="probability weighted MI",
maxima="2 level hierarchy",
features=probWtFeats3
),
list(
expansion="expansion",
filtering="unweighted MI",
maxima="unlimited hierarchy",
features=pureMIFeats
),
list(
expansion="expansion",
filtering="unweighted MI",
maxima="1 level hierarchy",
features=pureMIFeats2
),
list(
expansion="expansion",
filtering="unweighted MI",
maxima="2 level hierarchy",
features=pureMIFeats3
)
)
# # devtools::load_all("~/Git/tidy-info-stats")
# # https://rpubs.com/kelsimp/10992
#
# trimethoprimData = antibioticSet %>% filter(antibiotic=="Trimethoprim")
#
# ## TODO: refactor this to a single function call with matrix and features
# ## test ensure samples are correctly ordered.
#
# trimethoprimTrainingSet = trimethoprimData %>%
#   omop$getConceptNames() %>% compute() %>% collectAsTrainingSet(
#   sample_id, sensitivity, note_nlp_concept_id, norm_okapi_bm25, featureNameVar=note_nlp_concept_name)
#
#
# saveRDS(trimethoprimTrainingSet, file = "~/Dropbox/antibioticResistance/data/trimethoprimTrainingSet.rds")
#
# expect_equal(nrow(trimethoprimTrainingSet$matrix),length(trimethoprimTrainingSet$outcome))
comparison = ClassifierComparison$new()
varImp = NULL
for(featureSet in featureSets) {
title = paste0(featureSet$expansion," - ",featureSet$filtering," - ",featureSet$maxima)
message(title)
trimethoprimData = antibioticSetExpanded %>% filter(antibiotic=="Trimethoprim") %>% rename(concept_id = note_nlp_concept_id) %>% semi_join(featureSet$features, by="concept_id")
ts = trimethoprimData %>%
omop$getConceptNames() %>% compute() %>% collectAsTrainingSet(
sample_id, sensitivity, concept_id, norm_okapi_bm25, featureNameVar=concept_name)
# saveRDS(trimethoprimTrainingSetExpanded, file = paste0("~/Dropbox/antibioticResistance/data/trimethoprimTrainingSetExpanded.rds")
samples = length(ts$outcome)
train = sample(1:samples,floor(samples*0.8))
tmpSm = tidyinfostats::sparseMatrixToSparseMCsr(ts$matrix)
xTrain = tmpSm[train,]
xTest = tmpSm[-train,]
yTrain = ts$outcome[train]
yTest = ts$outcome[-train]
wi = c(Resistant=2.5,Sensitive=1)
m=LiblineaR::LiblineaR(data=xTrain,target=yTrain,type=0,cost=1,verbose=FALSE,wi=wi,bias=0)
# Scale the test data
# s2=xTest # scale(xTest,attr(s,"scaled:center"),attr(s,"scaled:scale"))
# varImp = m$W
# names(varImp) <- colnames(trimethoprimSparseMatrix)
varImp = varImp %>% bind_rows(
tibble(
name = ts$colLabels,
weight = m$W[1:length(ts$colLabels)]
) %>% mutate(importance = abs(weight)) %>% mutate(title=title)
)
# Make prediction
#pr=FALSE
#if(bestType==0 || bestType==6 || bestType==7) pr=TRUE
p=predict(m,xTest,proba=TRUE,decisionValues=TRUE)
# Display confusion matrix
# predResult = data.frame(p$probabilities) %>% mutate(actual = yTest, pred = p$predictions)
# ggplot(predResult, aes(x=Sensitive,colour=actual))+geom_density()
# predResult %>% group_by(actual,pred) %>% count()
# TODO: test this:
cr = ClassifierResult$fromPredictions(p$probabilities,yTest)
comparison$withResult(list(title=title),cr)
}
#varImp
comparison$compareDistributionStats()
# using a ml algorithm
# for (ts in c(trimethoprimTrainingSet,trimethoprimTrainingSetExpanded)) {
#
#   #ts = tidyIris() %>% mutate(
#   #  outcome = ifelse(as.character(outcome)=="setosa","Resistant","Sensitive")
#   #) %>% collectAsTrainingSet(sample,outcome,feature,value)
#
#   samples = length(ts$outcome)
#   train = sample(1:samples,floor(samples*0.8))
#
#   xTrain = ts$matrix[train,]
#   xTest = ts$matrix[-train,]
#   yTrain = ts$outcome[train]
#   yTest = ts$outcome[-train]
#
#   wi = c(Resistant=2,Sensitive=1)
#
#   #Malley et al. (2012).
#   rg = ranger::ranger(x=xTrain, y=yTrain, importance="impurity", probability = TRUE, class.weights = wi)
#   rg$variable.importance
#
#   rg.predict = predict(rg,data=xTest)
#
#   predResult = data.frame(rg.predict$predictions) %>% mutate(actual = yTest, pred = as.factor(ifelse(Sensitive>0.5,"Sensitive","Resistant")))
#
#   ggplot(predResult, aes(x=Sensitive,colour=actual))+geom_density()
# }
comparison$plotRocs(function(p) p$title)
comparison$plotRocs(function(p) p$title)
View(varImp)
omop$note_nlp
omop$note_nlp %>% select(lexical_variant,note_nlp_concept_id) %>% omop$getConceptNames()
omop$note_nlp %>% select(lexical_variant,note_nlp_concept_id) %>% omop$getConceptNames() %>% head(1000)
View(omop$note_nlp %>% select(lexical_variant,note_nlp_concept_id) %>% omop$getConceptNames() %>% head(1000))
View(omop$note_nlp %>% select(lexical_variant,note_nlp_concept_id) %>% omop$getConceptNames() %>% head(1000) %>% collect())
knitr::opts_chunk$set(echo = TRUE)
comparison$compareDistributionStats() %>% standardPrintOutput::saveTableLandscape("~/Dropbox/antibioticResistance/modelComparison")
devtools::load_all("~/Git/tidy-info-stats/")
devtools::load_all("~/Git/classifier-result/")
devtools::load_all("~/Git/standard-print-output/")
theme_set(standardPrintOutput::defaultFigureLayout())
comparison$compareDistributionStats() %>% standardPrintOutput::saveTableLandscape("~/Dropbox/antibioticResistance/modelComparison")
traceback()
#' @param pageLength maximum length of the page in inches (8)
#' @param defaultFontSize default size of font in points (10)
#' @param tableWidth width of the table in inches or NULL to fit contents automatically
#' @param colWidths a vector of relative column widths
#' @keywords huxtable webshot
#' @import huxtable
#' @export
#' @examples
#' setwd(tempdir())
#' hux(iris) %>% saveTableLandscape("iris")
saveTableLandscape = function(labelledDataframe, filename, pageLength=8, defaultFontSize=10, tableWidth=NULL, colWidths = NULL) {
tmp = saveTable(labelledDataFrame, filename, pageLength, defaultFontSize, tableWidth, colWidths)
staplr::rotate_pdf(page_rotation = 270,
input_filepath = normalizePath(paste0(filename,".pdf"),mustWork = FALSE),
output_filepath = normalizePath(paste0(filename,".pdf"),mustWork = FALSE),
overwrite = TRUE)
magick::image_rotate(
magick::image_read(
normalizePath(paste0(filename,".png"),mustWork = FALSE)
),270) %>% magick::image_write(
normalizePath(paste0(filename,".png"),mustWork = FALSE)
)
return(tmp)
}
comparison$compareDistributionStats()
warnings()
as.data.frame(comparison$compareDistributionStats())
as.data.frame(comparison$compareDistributionStats()) %>% standardPrintOutput::saveTableLandscape("~/Dropbox/antibioticResistance/modelComparison")
as.data.frame()
as.data.frame
?as.data.frame
comparison$plotRocs() %>% standardPrintOutput::saveFullPageFigure("~/Dropbox/antibioticResistance/modelComparisonRocs")
tmpResult = comparison$compareDistributionStats()
View(tmpResult)
tmpResult %>% standardPrintOutput::saveTableLandscape("~/Dropbox/antibioticResistance/modelComparison")
library(tidyverse)
rm(saveTableLandscape
)
standardPrintOutput::saveTableLandscape(tmpResult,"~/Dropbox/antibioticResistance/modelComparison")
class(tmpResult)
standardPrintOutput::saveTableLandscape(labelledDataFrame = tmpResult,filename = "~/Dropbox/antibioticResistance/modelComparison")
devtools::load_all("~/Git/standard-print-output/")
standardPrintOutput::saveTableLandscape(tmpResult,"~/Dropbox/antibioticResistance/modelComparison")
comparison$plotRocs(function(params) params$title) %>% standardPrintOutput::saveFullPageFigure("~/Dropbox/antibioticResistance/modelComparisonRocs")
write_delim(varImp,"~/Dropbox/antibioticResistance/modelComparisonVarImp",delim = "\t")
